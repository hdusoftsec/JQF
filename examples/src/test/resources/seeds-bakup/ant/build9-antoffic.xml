<project name="MyProject" default="dist" basedir=".">
  <description>
    simple example build file
  </description>
  <!-- set global properties for this build -->
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="dist" location="dist"/>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
  </target>

  <target name="compile" depends="init"
        description="compile the source">
    <!-- Compile the Java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}"/>
  </target>

  <target name="dist" depends="compile"
        description="generate the distribution">
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
    <jar jarfile="${dist}/lib/MyProject-${DSTAMP}.jar" basedir="${build}"/>
  </target>

  <target name="clean"
        description="clean up">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
  
<classpath>
  <pathelement path="${classpath}"/>
  <fileset dir="lib">
    <include name="**/*.jar"/>
  </fileset>
  <pathelement location="classes"/>
  <dirset dir="${build.dir}">
    <include name="apps/**/classes"/>
    <exclude name="apps/**/*Test*"/>
  </dirset>
  <filelist refid="third-party_jars"/>
</classpath>

<path id="base.path">
  <pathelement path="${classpath}"/>
  <fileset dir="lib">
    <include name="**/*.jar"/>
  </fileset>
  <pathelement location="classes"/>
</path>

<path id="tests.path" cache="true">
  <path refid="base.path"/>
  <pathelement location="testclasses"/>
</path>

<path id="base.path">
  <pathelement path="${classpath}"/>
</path>
<path id="base.path" path="${classpath}"/>

<path id="lib.path.ref">
  <fileset dir="lib" includes="*.jar"/>
</path>
<javac srcdir="src" destdir="classes">
  <compilerarg arg="-Xbootclasspath/p:${toString:lib.path.ref}"/>
</javac>

<taskdef name="for" classname="net.sf.antcontrib.logic.For"/> <for  />


    <target name="stage-workspace">
        <echo message="Cleaning Staging Directory: ${staging-dir}"/>
        <delete dir="${staging-dir}" quiet="true"/>
        <mkdir dir="${staging-dir}"/>
        <echo message="Cleaning Build Workspace: ${staging-dir}"/>
        <delete dir="${build-ws}" quiet="true"/>
        <mkdir dir="${build-ws}"/>
        <echo message="Staging Build Workspace from Template: ${template-ws}"/>
        <copy todir="${build-ws}/.metadata">
            <fileset dir="${template-ws}/.metadata"/>
        </copy>
    </target>
    <pathconvert pathsep=" " property="EquinoxJarPath">
        <sort>
            <fileset dir="${env.ECLIPSE_HOME}/plugins"> 
                <include name="**/org.eclipse.equinox.launcher_*.jar"/>
            </fileset>
        </sort>
    </pathconvert>
    <macrodef name="eclipseAntRunner">
        <attribute name="antFile"/>
        <attribute name="target"/>
        <sequential>
            <exec executable="${env.JAVA_HOME}\jre\bin\java">
                <arg value="-XX:NewRatio=5"/>
                <arg value="-XX:+UseAdaptiveSizePolicy"/>
                <arg value="-XX:+UseParallelGC"/>
                <arg value="-XX:MaxPermSize=256M"/>
                <arg value="-Xms256m"/>
                <arg value="-Xmx1024m"/>
                <arg value="-Dstudio.provisioning.automation.logger=org.apache.tools.ant.DefaultLogger"/>
                <arg value="-Dstudio.provisioning.automation.log.file=${automation-build-log}"/>
                <arg value="-jar"/>
                <arg value="${EquinoxJarPath}"/>
                <arg value="-data"/>
                <arg value="${build-ws}"/>
                <arg value="-application"/>
                <arg value="org.eclipse.ant.ui.antRunner"/>
                <arg value="-file"/>
                <arg value="@{antFile}"/>
                <arg value="@{target}"/>
                <arg value="-consoleLog"/>
            </exec>
        </sequential>
    </macrodef>
    <!--
        Build executes the BUILD_SCRIPT ANT script in Design Studio.  
        
        The build script provided should include tasks for invoking the import 
        and build of Design Studio projects.  Tasks required to run 
        in the Design Studio run-time must be included in the provided build script.
    -->
    <target name="build" depends="stage-workspace">
        <eclipseAntRunner antFile="${BUILD_SCRIPT}" target="all"/>
    </target>

</project>